{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"16R8Qhe9-z70viphW_Sek7MDEFT096Fmq","timestamp":1731824070421}],"gpuType":"T4","authorship_tag":"ABX9TyNLGbgvBYz/giDnrDfGeNrH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"BqV9WqEW-tj2"},"outputs":[],"source":["!unzip /content/Graph_cuts_processed_images.zip -d /content/Graph_cuts_processed_images\n"]},{"cell_type":"code","source":["import os\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torchvision import datasets, models, transforms\n","from torch.utils.data import DataLoader\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, cohen_kappa_score, matthews_corrcoef, roc_auc_score, confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(f\"Using device: {device}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i2qU2M-J_A-S","executionInfo":{"status":"ok","timestamp":1731778169023,"user_tz":-330,"elapsed":6591,"user":{"displayName":"Sahana Sree K","userId":"12676952411746791110"}},"outputId":"8d09e653-a64b-4e29-cab6-9693f111e1a2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Using device: cuda\n"]}]},{"cell_type":"code","source":["transform = transforms.Compose([\n","    transforms.Resize((224, 224)),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n","])\n","extracted_dir = '/content/congenital-heart-disease/congenital-heart-disease'\n","dataset = datasets.ImageFolder(extracted_dir, transform=transform)\n","print(f\"Total images in dataset: {len(dataset)}\")\n","print(f\"Classes: {dataset.classes}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uJfwFKcEBawN","executionInfo":{"status":"ok","timestamp":1731778175068,"user_tz":-330,"elapsed":640,"user":{"displayName":"Sahana Sree K","userId":"12676952411746791110"}},"outputId":"4ec524fe-56f2-41a1-c8e6-36c9b7e4322b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Total images in dataset: 6485\n","Classes: ['ASD', 'Normal', 'PDA', 'VSD']\n"]}]},{"cell_type":"code","source":["train_size = int(0.8 * len(dataset))\n","val_size = len(dataset) - train_size\n","train_dataset, val_dataset = torch.utils.data.random_split(dataset, [train_size, val_size])\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)\n","print(f\"Training set size: {len(train_dataset)}\")\n","print(f\"Validation set size: {len(val_dataset)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M6jI4NEUBduD","executionInfo":{"status":"ok","timestamp":1731778193648,"user_tz":-330,"elapsed":387,"user":{"displayName":"Sahana Sree K","userId":"12676952411746791110"}},"outputId":"766f084f-313e-4bfe-802c-8f5413346cc2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Training set size: 5188\n","Validation set size: 1297\n"]}]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torchvision import models\n","from torch.utils.data import DataLoader\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, cohen_kappa_score, matthews_corrcoef, roc_auc_score, confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(f\"Using device: {device}\")\n","model = models.resnet50(pretrained=True)\n","model.fc = nn.Linear(model.fc.in_features, 4)\n","model.to(device)\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.0001)\n","def train_model(model, train_loader, criterion, optimizer, num_epochs=20):\n","    best_model_wts = model.state_dict()\n","    best_acc = 0.0\n","\n","    for epoch in range(num_epochs):\n","        print(f\"Epoch {epoch+1}/{num_epochs}\")\n","        model.train()\n","        running_loss = 0.0\n","        correct_preds = 0\n","        total_preds = 0\n","        for inputs, labels in train_loader:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(inputs)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","            running_loss += loss.item()\n","            _, predicted = torch.max(outputs, 1)\n","            correct_preds += (predicted == labels).sum().item()\n","            total_preds += labels.size(0)\n","        epoch_loss = running_loss / len(train_loader)\n","        epoch_acc = correct_preds / total_preds\n","        print(f\"Training Loss: {epoch_loss:.4f}, Training Accuracy: {epoch_acc:.4f}\")\n","        if epoch_acc > best_acc:\n","            best_acc = epoch_acc\n","            best_model_wts = model.state_dict()\n","\n","    print(\"Training complete\")\n","    model.load_state_dict(best_model_wts)\n","    return model\n","\n","trained_model = train_model(model, train_loader, criterion, optimizer, num_epochs=20)\n","model_save_path = '/content/resnet50_trained_model.pth'\n","torch.save(trained_model.state_dict(), model_save_path)\n","print(f\"Model saved to {model_save_path}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xt-_PxnxBiTY","executionInfo":{"status":"ok","timestamp":1731780129018,"user_tz":-330,"elapsed":1409636,"user":{"displayName":"Sahana Sree K","userId":"12676952411746791110"}},"outputId":"0fe094c9-8d20-4778-86dd-92b924d2626b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Using device: cuda\n","Epoch 1/20\n","Training Loss: 0.9301, Training Accuracy: 0.6025\n","Epoch 2/20\n","Training Loss: 0.5248, Training Accuracy: 0.7972\n","Epoch 3/20\n","Training Loss: 0.2603, Training Accuracy: 0.9027\n","Epoch 4/20\n","Training Loss: 0.1644, Training Accuracy: 0.9393\n","Epoch 5/20\n","Training Loss: 0.1012, Training Accuracy: 0.9622\n","Epoch 6/20\n","Training Loss: 0.0693, Training Accuracy: 0.9788\n","Epoch 7/20\n","Training Loss: 0.1298, Training Accuracy: 0.9539\n","Epoch 8/20\n","Training Loss: 0.0743, Training Accuracy: 0.9749\n","Epoch 9/20\n","Training Loss: 0.1058, Training Accuracy: 0.9630\n","Epoch 10/20\n","Training Loss: 0.1133, Training Accuracy: 0.9614\n","Epoch 11/20\n","Training Loss: 0.0584, Training Accuracy: 0.9821\n","Epoch 12/20\n","Training Loss: 0.0703, Training Accuracy: 0.9792\n","Epoch 13/20\n","Training Loss: 0.0712, Training Accuracy: 0.9738\n","Epoch 14/20\n","Training Loss: 0.0278, Training Accuracy: 0.9911\n","Epoch 15/20\n","Training Loss: 0.0171, Training Accuracy: 0.9950\n","Epoch 16/20\n","Training Loss: 0.0134, Training Accuracy: 0.9965\n","Epoch 17/20\n","Training Loss: 0.0293, Training Accuracy: 0.9909\n","Epoch 18/20\n","Training Loss: 0.0386, Training Accuracy: 0.9898\n","Epoch 19/20\n","Training Loss: 0.1386, Training Accuracy: 0.9582\n","Epoch 20/20\n","Training Loss: 0.0856, Training Accuracy: 0.9728\n","Training complete\n","Model saved to /content/resnet50_trained_model.pth\n"]}]},{"cell_type":"code","source":["def evaluate_metrics(true_labels, predicted_labels):\n","    accuracy = accuracy_score(true_labels, predicted_labels)\n","    precision = precision_score(true_labels, predicted_labels, average='weighted')\n","    recall = recall_score(true_labels, predicted_labels, average='weighted')\n","    f1 = f1_score(true_labels, predicted_labels, average='weighted')\n","    cohen_kappa = cohen_kappa_score(true_labels, predicted_labels)\n","    mcc = matthews_corrcoef(true_labels, predicted_labels)\n","\n","    try:\n","        roc_auc = roc_auc_score(true_labels, predicted_labels, multi_class='ovr')\n","    except:\n","        roc_auc = 'Not Available'\n","\n","    print(f\"Accuracy: {accuracy:.4f}\")\n","    print(f\"Precision: {precision:.4f}\")\n","    print(f\"Recall: {recall:.4f}\")\n","    print(f\"F1 Score: {f1:.4f}\")\n","    print(f\"Cohen's Kappa: {cohen_kappa:.4f}\")\n","    print(f\"Matthews Correlation Coefficient: {mcc:.4f}\")\n","    if isinstance(roc_auc, str):\n","        print(f\"ROC-AUC Score: {roc_auc}\")\n","    else:\n","        print(f\"ROC-AUC Score: {roc_auc:.4f}\")\n","    cm = confusion_matrix(true_labels, predicted_labels)\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['ASD', 'VSD', 'PDA', 'Normal'], yticklabels=['ASD', 'VSD', 'PDA', 'Normal'])\n","    plt.title(\"Confusion Matrix\")\n","    plt.xlabel(\"Predicted Labels\")\n","    plt.ylabel(\"True Labels\")\n","    plt.show()\n"],"metadata":{"id":"RalWFC0IBjbl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluate the model on the validation set\n","def evaluate_model(model, val_loader):\n","    model.eval()\n","    all_labels = []\n","    all_preds = []\n","\n","    with torch.no_grad():\n","        for images, labels in val_loader:\n","            images, labels = images.to(device), labels.to(device)\n","            outputs = model(images)\n","            _, predicted = torch.max(outputs, 1)\n","            all_labels.extend(labels.cpu().numpy())\n","            all_preds.extend(predicted.cpu().numpy())\n","\n","    # Call the evaluate_metrics function with the true and predicted labels\n","    evaluate_metrics(all_labels, all_preds)\n","\n","# Evaluate the trained model\n","evaluate_model(trained_model, val_loader)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":593},"id":"5fXnAPlDJAiW","executionInfo":{"status":"ok","timestamp":1731780328608,"user_tz":-330,"elapsed":10216,"user":{"displayName":"Sahana Sree K","userId":"12676952411746791110"}},"outputId":"165a7bc6-f35e-48bf-afea-299334964af4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8072\n","Precision: 0.8132\n","Recall: 0.8072\n","F1 Score: 0.8089\n","Cohen's Kappa: 0.7376\n","Matthews Correlation Coefficient: 0.7386\n","ROC-AUC Score: Not Available\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"wpbQPQi_JpIi"},"execution_count":null,"outputs":[]}]}
